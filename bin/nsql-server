#!/usr/bin/env node

var connect = require('connect'),
    http    = require('http'),
    scraper = require('../lib/scraper'),

    port    = process.argv[2] || 8888,

    app     = connect()
              .use(connect.query())
              .use(connect.json())
              .use(handle);


function handle (req, res) {
  var hasJSON        = (Object.keys(req.body).length  > 0),
      hasQueryString = (Object.keys(req.query).length > 0),
      queries;

  // Handle for either a JSON request or a JSONP request via the querystring

  queries = (hasJSON) ? req.body : false;
  queries = (queries === false && hasQueryString) ? req.query : queries;

  // Scrape the requested data then use finish() to return data

  if (queries) {
    scraper.scrape(queries, function (err, results) {
      finish(res, {error: err, results: results, callback: req.query.callback});
    });
  } else {
    finish(res, {error: 'No queries', callback: req.query.callback});
  }
}

// Finish responding to request

function finish (res, params) {
  var error    = params.error,
      callback = params.callback,
      results  = JSON.stringify(params.results);

  if (error && callback) {

    // Error as JSONP

    res.writeHead('401', {'Content-type':'application/script'});
    res.end(callback + '({"error": "' + error + '"})');

  } else if (error) {

    // Error as JSON

    res.writeHead('401', {'Content-type':'application/json'});
    res.end('{"error": "' + error + '"}');

  } else if (callback) {

    // Results as JSONP

    res.writeHead('200', {'Content-type':'application/script'});
    res.end(callback + '(' + results + ')');

  } else {

    // Results as JSON

    res.writeHead('200', {'Content-type':'application/json'});
    res.end(results);
  }
}


http.createServer(app).listen(port, function () {
  console.log('nsql serving on ' + port);
});