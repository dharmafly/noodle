#!/usr/bin/env node

var cli     = require('commander'),
    connect = require('connect'),
    http    = require('http'),
    scraper = require('../lib/scraper'),

    app     = connect()
              .use(connect.query())
              .use(connect.json())
              .use(handle),

    version = JSON.parse(require('fs')
              .readFileSync('package.json', 'utf8'))
              .version;


// Environment variables

cli.version(version)
   .option('-p --port <n>', 'Set the server port (8888)', parseInt)
   .option('-c --cache <n>','Set the cache clear time in milliseconds (3600000)', parseInt)
   .parse(process.argv);

process.env.PORT       = cli.port  || 8888;
process.env.CACHE_TIME = cli.cache || 3600000;

// Handle requested query via scraper module
// This handles data via the request body as JSON or as Querystring for JSONP

function handle (req, res) {
  // Check JSON Body for scrape query
  var query = (Object.keys(req.body).length > 0) ?  req.body : false;

  // Check querystring for scrape query
  if (!query && req.query.url && req.query.selector && req.query.extract) {
    query = {
              url: req.query.url,
              selector: req.query.selector,
              extract: req.query.extract
            };
  }

  if (query) {
    scraper.scrape(query, function (err, results) {
      finish(res, {error: err, results: results, callback: req.query.callback});
    });
  } else {
    finish(res, {error: 'No query', callback: req.query.callback});
  }
}

// Respond to request

function finish (res, params) {
  res.writeHead('200', {'Content-type':'application/json'});

  if (params.error && params.callback) {
    // Error as JSONP

    res.end(params.callback + '({"error": "' + params.error + '"})');

  } else if (params.error) {
    // Error as JSON

    res.end('{"error": "' + params.error + '"}');

  } else if (params.callback) {
    // Results as JSONP

    res.end(params.callback + '(' + params.results + ')');

  } else {
    // Results as JSON

    res.end(params.results);
  }
}

// Start server

http.createServer(app).listen(process.env.PORT, function () {
  console.log('nsql serving on port ' + process.env.PORT);
  console.log('The cache will clear every ' + process.env.CACHE_TIME + ' milliseconds.');
});